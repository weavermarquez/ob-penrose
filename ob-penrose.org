#+title: Ob Penrose
#+property: header-args :tangle no :noweb yes
* Introduction
This is my first Org Babel package. I'm working off of both =ob-mermaid= and the =ob-template= available through worg.
* =ob-penrose v0.1= Minimal working example
** Boilerplate
#+NAME: Preamble
#+begin_src elisp
;;; ob-penrose.el --- org-babel functions for penrose evaluation

;; Copyright (C) 2023 Valerie Kim

;; Author: Valerie Kim
;; Keywords: declarative diagram, literate programming, reproducible research
;; Homepage: https://github.com/weavermarquez/ob-penrose
;; Version: 0.01

;;; License: see LICENSE.txt

;;; Commentary:

;; Org-Babel support for evaluating penrose diagrams.

;; Finally you can use `edebug' to instrumentalize
;; `org-babel-expand-body:penrose' and continue to evaluate the code block. You
;; try to add header keywords and change the body of the code block and
;; reevaluate the code block to observe how things get handled.

;;; Requirements:

;; roger cli | https://penrose.cs.cmu.edu/docs/ref/api
;; penrose syntax highlights | https://github.com/weavermarquez/penrose-mode
;; penrose syntax highlights | https://github.com/penrose/penrose
#+end_src
#+NAME: Requires
#+begin_src elisp
;;; Code:
(require 'ob)
(require 'ob-ref)
(require 'ob-comint) ;; Session based evaluation
(require 'ob-eval) ;; Temp File based evaluation
;; (require 'penrose-modes)
#+end_src
#+NAME: FileExts
#+begin_src elisp
;; optionally define a file extension for this language
(add-to-list 'org-babel-tangle-lang-exts '("template" . "tmp"))
;; (add-to-list 'org-babel-tangle-lang-exts '("substance" . "substance"))
;; (add-to-list 'org-babel-tangle-lang-exts '("style" . "style"))
;; (add-to-list 'org-babel-tangle-lang-exts '("domain" . "domain"))
#+end_src
** Set Defaults
#+NAME: Defaults
#+begin_src elisp
(defvar org-babel-default-header-args:penrose
  '((:results . "file") (:exports . "results"))
  "Default arguments for evaluating a penrose source block.")

(defcustom ob-penrose-cli-path nil
  "Path to penrose.cli executable."
  :group 'org-babel
  :type 'string)
#+end_src
#+NAME: ExpandBody
#+begin_src elisp
;; This function expands the body of a source code block by doing things like
;; prepending argument definitions to the body, it should be called by the
;; `org-babel-execute:penrose' function below. Variables get concatenated in
;; the `mapconcat' form, therefore to change the formatting you can edit the
;; `format' form.

(defun org-babel-expand-body:penrose (body params &optional processed-params)
  "Expand BODY according to PARAMS, return the expanded body."
  (require 'inf-penrose nil t)
  (let ((vars (org-babel--get-vars (or processed-params (org-babel-process-params params)))))
    (concat
     (mapconcat ;; define any variables
      (lambda (pair)
        (format "%s=%S"
                (car pair) (org-babel-penrose-var-to-penrose (cdr pair))))
      vars "\n")
     "\n" body "\n")))
#+end_src
** Execute
#+NAME: Execute
#+begin_src elisp
(defun org-babel-execute:penrose (body params)
  "Execute a block of Penrose code with org-babel.
This function is called by `org-babel-execute-src-block'"
  (message "executing Penrose source code block")
  (let* ((out-file (or (cdr (assoc :file params))
                       (error "penrose requires a \":file\" header argument")))
         (source-style-file (cdr (assoc :style params)))
         (source-domain-file (cdr (assoc :domain params)))
         (variation (cdr (assoc :variation params)))
         (in-style-file (org-babel-temp-file "penrose-style-" ".style"))
         (in-domain-file (org-babel-temp-file "penrose-domain-" ".domain"))
         (in-substance-file (org-babel-temp-file "penrose-substance-" ".substance"))
         (roger (or ob-penrose-cli-path
                   (executable-find "roger")
                   (error "`ob-penrose-cli-path' is not set and roger is not in `exec-path'")))
         (cmd (concat (shell-quote-argument (expand-file-name roger))
                      " trio --trio " (org-babel-process-file-name in-substance-file)
                      " " (org-babel-process-file-name in-style-file)
                      " " (org-babel-process-file-name in-domain-file)
                      " -o " (org-babel-process-file-name out-file)
                      " -v " variation)))
    (unless (file-executable-p roger)
      ;; cannot happen with `executable-find', so we complain about
      ;; `ob-penrose-cli-path'
      (error "Cannot find or execute %s, please check `ob-penrose-cli-path'" roger))
    (with-temp-file in-style-file (insert (org-babel-eval-read-file source-style-file)))
    (with-temp-file in-domain-file (insert (org-babel-eval-read-file source-domain-file)))
    (with-temp-file in-substance-file (insert body))
    (message "%s" cmd)
    (org-babel-eval cmd "")
    nil))
#+end_src
** COMMENT Unused
TEMPLATE Execute
#+NAME: OldExecute
#+begin_src elisp :tangle no
;; This is the main function which is called to evaluate a code
;; block.
;;
;; This function will evaluate the body of the source code and
;; return the results as emacs-lisp depending on the value of the
;; :results header argument
;; - output means that the output to STDOUT will be captured and
;;   returned
;; - value means that the value of the last statement in the
;;   source code block will be returned
;;
;; The most common first step in this function is the expansion of the
;; PARAMS argument using `org-babel-process-params'.
;;
;; Please feel free to not implement options which aren't appropriate
;; for your language (e.g. not all languages support interactive
;; "session" evaluation).  Also you are free to define any new header
;; arguments which you feel may be useful -- all header arguments
;; specified by the user will be available in the PARAMS variable.


(defun org-babel-execute:penrose (body params)
  "Execute a block of Penrose code with org-babel.
This function is called by `org-babel-execute-src-block'"
  (message "executing Penrose source code block")
  (let* ((processed-params (org-babel-process-params params))
         ;; set the session if the value of the session keyword is not the
         ;; string `none'
         (session (unless (string= value "none")
                   (org-babel-penrose-initiate-session
                    (cdr (assq :session processed-params)))))
         ;; variables assigned for use in the block
         (vars (org-babel--get-vars processed-params))
         (result-params (assq :result-params processed-params))
         ;; either OUTPUT or VALUE which should behave as described above
         (result-type (assq :result-type processed-params))
         ;; expand the body with `org-babel-expand-body:penrose'
         (full-body (org-babel-expand-body:penrose
                     body params processed-params)))
    ;; actually execute the source-code block either in a session or
    ;; possibly by dropping it to a temporary file and evaluating the
    ;; file.
    ;;
    ;; for session based evaluation the functions defined in
    ;; `org-babel-comint' will probably be helpful.
    ;;
    ;; for external evaluation the functions defined in
    ;; `org-babel-eval' will probably be helpful.
    ;;
    ;; when forming a shell command, or a fragment of code in some
    ;; other language, please preprocess any file names involved with
    ;; the function `org-babel-process-file-name'. (See the way that
    ;; function is used in the language files)
    ))
#+end_src

TEMPLATE Other Featurers
#+NAME: OtherFeatures
#+begin_src elisp :tangle no
;; This function should be used to assign any variables in params in
;; the context of the session environment.
(defun org-babel-prep-session:penrose (session params)
  "Prepare SESSION according to the header arguments specified in PARAMS."
  )

(defun org-babel-penrose-var-to-penrose (var)
  "Convert an elisp var into a string of penrose source code
specifying a var of the same value."
  (format "%S" var))

(defun org-babel-penrose-table-or-string (results)
  "If the results look like a table, then convert them into an
Emacs-lisp table, otherwise return the results as a string."
  )

(defun org-babel-penrose-initiate-session (&optional session)
  "If there is not a current inferior-process-buffer in SESSION then create.
Return the initialized session."
  (unless (string= session "none")
    ))
#+end_src
** Tangle
#+NAME: Output
#+begin_src emacs-lisp :tangle ob-penrose.el
<<Preamble>>

<<Requires>>

<<Defaults>>

<<ExpandBody>>

<<Execute>>

(provide 'ob-penrose)
;;; ob-penrose.el ends here
#+end_src
* =v0.1= example using Venn Diagram
Header Args:
- output file name (relative path, SVG)
- domain file (relative)
- style file (relative)
Content:
- Substance code

#+begin_src penrose :file owo.svg :domain demo/venn.domain :style demo/venn.style
Set A, B, C, D, E, F, G

IsSubset(B, A)
IsSubset(C, A)
IsSubset(D, B)
IsSubset(E, B)
IsSubset(F, C)
IsSubset(G, C)

Not(Intersecting(E, D))
Not(Intersecting(F, G))
Not(Intersecting(B, C))

AutoLabel All
#+end_src

#+RESULTS:
[[file:owo.svg]]

